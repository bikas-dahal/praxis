// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id    String    @default(cuid())
  email String
  token      String
  expires    DateTime
 
  @@unique([email, token])
}
 
 
model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole        @default(USER)
  blogs         Blog[]
  comments      Comment[]
  likes         Like[]
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 


model Blog {
  id      String   @id @default(cuid())
  title   String
  content String
  tags    String[]
  slug      String      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPublished Boolean  @default(true)
  authorId String
  author User     @relation(fields: [authorId], references: [id])
  likes     Like[]
  comments Comment[]
}

model Like {
  id          String      @id @default(cuid())
  blogId      String
  userId      String
  createdAt   DateTime    @default(now())
  blog        Blog        @relation(fields: [blogId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}

model Comment {
  id          String      @id @default(cuid())
  content     String
  blogId      String
  userId      String
  blog        Blog        @relation(fields: [blogId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  parentId    String?
}




model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String
  questions   Question[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Question {
  id          String   @id @default(cuid())
  text        String
  options     String[] // Array of options
  correctAnswer String
  quizId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id])
}

